#!/usr/bin/python
import time
import sys
import os
import collections
import sqlite3 as lite
from twitter import *
from datetime import datetime, date
import numpy as np
import matplotlib
import matplotlib.dates as md
matplotlib.use('Agg')

import matplotlib.pyplot as plt

token = open('../../twitter/token', 'r').readline().strip()
token_secret = open('../../twitter/token_secret', 'r').readline().strip()
consumer_key = open('../../twitter/consumer_key', 'r').readline().strip()
consumer_secret = open('../../twitter/consumer_secret', 'r').readline().strip()

Default_RH = 40
Default_Temp = 18

database = { "sensor_log": "../Data/sensor_stream.db",
			 "control_log": "../Data/control_stream.db" }

logDirectory = "../logs"

historyLenSec = 3600
refreshSec = 600
sensorParams = { 2 : "Temperature", 3 : "Humidity" }
chartScale = { "Temperature" : (8, 20), "Humidity":(30, 100), "Control" : (-0.01, 1.01)}

def queryLogData(tableName, timestamp):
	try:
		con = lite.connect(database[tableName])
		cur = con.cursor()

		query = "select * from {} where time_stamp > ?".format(tableName)
		cur.execute(query, [timestamp])
		return cur.fetchall()

	finally:
		if(con != None):
			con.close()

def generateControlChart(timestamp):
	log = queryLogData("control_log", timestamp)
	controls = set([c[1] for c in log])	

	print "Found controls {}".format(controls)

	result = {}
	for control in controls:
		print "processing control {}".format(control)
		controlData = filter(lambda x: x[1] == control, log)

		dates = [datetime.fromtimestamp(x[0]) for x in controlData]
		xValues = md.date2num(dates)
		yValues = [y[2] for y in controlData]
		result[control] = (xValues, yValues)

	return { "Control" : result }

def generateSensorChart(timestamp):
	log = queryLogData("sensor_log", timestamp)
	sensors = set([s[1] for s in log])

	print "Found sensors {}".format(sensors)

	result = {}

	for param, paramLabel in sensorParams.iteritems():
		result[paramLabel] = {}

		for sensor in sensors:
			print "processing {} sensor {}".format(paramLabel, sensor)

			sensorData = filter(lambda x: x[1] == sensor, log)
			dates = [datetime.fromtimestamp(x[0]) for x in sensorData]
			xValues = md.date2num(dates)
			yValues = [y[param] for y in sensorData]

			result[paramLabel]["Sensor {}".format(sensor)] = (xValues, yValues)

	return result	

def runReport():	
	timestamp = int(time.time()) - historyLenSec
	chartData = collections.OrderedDict()

	sensorData = generateSensorChart(timestamp)
	chartData.update(sensorData)

	controlData = generateControlChart(timestamp)
	chartData.update(controlData)
	
	targets = findTargetParameters()

	message = createReportMessage(chartData, targets)
	picture = createCharts(chartData, "{}".format(timestamp), targets)

	return message, picture

def createReportMessage(inputData, targets):
	message = "Average values for last {} minutes\n".format(historyLenSec/60)

	for param in sensorParams.itervalues():
		sensors = inputData[param]
		values = [data[1] for data in sensors.itervalues()]
		
		message = message + "{} {:10.1f}, Target {:10.1f};\n".format(param, np.mean(values), targets[param])

	return message

def createCharts(inputData, label, targets):
	plt.style.use("ggplot")
	fig, axis = plt.subplots(nrows=len(inputData), sharex=True)				

	axis = dict(zip(inputData, axis))

	for chartName, chartData in inputData.iteritems():
		chart = axis[chartName]
		chart.xaxis.set_major_formatter(md.DateFormatter('%H:%M:%S'))
		chart.set_title(chartName)

		# Populate with data		
		for name, line in chartData.iteritems():
			chart.plot(line[0], line[1], label=name)
			chart.set_ylim(chartScale[chartName])

		if chartName in targets:
			chart.axhline(y = targets[chartName], label="Target")

		chart.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3, ncol=2, mode="expand", borderaxespad=0.)

		# chart.legend(loc='lower left', fontsize="small", framealpha = 0.5, fancybox=True, ncol=3, frameon=True)


	lc, lb = plt.xticks()
	plt.setp(lb, rotation=45)

	filename = "{}/{}.png".format(logDirectory, label)
	print "saving file " + filename
	plt.savefig(filename, dpi = 100)
	print "saved"

	plt.close(fig)
	return filename

def postTweet(tweet, picture):
	print tweet
	t = Twitter(auth=OAuth(
			consumer_key=consumer_key,
    		consumer_secret=consumer_secret,
    		token=token,
    		token_secret=token_secret))

	with open(picture, "rb") as imagefile:
		params = {"media[]": imagefile.read(), "status": tweet}
		t.statuses.update_with_media(**params)
	
	os.remove(picture)


#TODO unify with environment regulator
def findTargetParameters():

	temp = Default_Temp
	rh 	 = Default_RH

	try:
		con = lite.connect(database["control_log"])

		timestamp = int(time.time())
		cur = con.cursor()  

		cur.execute("select * from control_target where time_stamp < ? order by time_stamp desc limit 1" , [timestamp])
		pastTarget = cur.fetchall()

		cur.execute("select * from control_target where time_stamp > ? order by time_stamp asc limit 1" , [timestamp])
		futureTarget = cur.fetchall()

		futureTimestamp = futureTarget[0][0]
		pastTimestamp = pastTarget[0][0]

		scale = (1.0 * timestamp - pastTimestamp) / (futureTimestamp - pastTimestamp)

		futureTemp = futureTarget[0][1]
		futureRH   = futureTarget[0][2]

		pastTemp   = pastTarget[0][1]
		pastRH 	   = pastTarget[0][2]

		temp  = pastTemp + scale * (futureTemp - pastTemp)
		rh = pastRH + scale * (futureRH - pastRH)				

	except lite.Error, e:
		if con:
			con.rollback()

		print "Error %s:" % e.args[0]

	except:
		print sys.exc_info()

	finally:
		if con:
			con.close() 

	return { "Temperature" : temp, "Humidity" : rh }  


while True:

	try:
		report = runReport()
		postTweet (*report)
	except:
		print sys.exc_info()

	time.sleep(refreshSec)

